from os import path
import tensorflow as tf
from tensorflow.keras.optimizers import Adam
from models.simple_gan import build_simple_nn, build_gan, train_step
from utils.save_models import save_models
from utils.simple_data_generator import get_quadratic_data_sample, save_plot_to_buffer, plot_quadratic_data
import matplotlib.pyplot as plt
from time import strftime, localtime


if __name__ == '__main__':

        # Set Parameters for training

        epochs = 1001  # Training Epochs
        z_dim = 10  # Generator Input units
        layers = 4  # Number of hidden layers
        g_out_dim = 2  # Generator Output Units == Discriminator Input Units
        batch_size = 100  # Define Batch Size
        plot_interval = 100  # Every plot_interval create a graph with real and generated data distribution

        # Build Generator
        generator = build_simple_nn(
                input_units=z_dim,
                output_units=g_out_dim,
                layer_number=layers,
                activation='linear',
                model_name='generator'
        )

        # Build Discriminator
        discriminator = build_simple_nn(
                input_units=g_out_dim,
                output_units=1,
                layer_number=layers,
                activation='sigmoid',
                model_name='discriminator'
        )

        # Compile Discriminator
        discriminator.compile(
                optimizer=Adam(),
                loss='binary_crossentropy')

        # Create Keras GAN Model
        gan = build_gan(generator, discriminator)

        # Compile GAN Model
        gan.compile(
                optimizer=Adam(),
                loss='binary_crossentropy')

        # Set Parameters for training tracking and training evaluation
        # Random vectors to control generator evolution
        control_z_vectors = tf.random.normal(shape=(batch_size, 10))
        # Returns quadratic distributed data, with and without noise
        # Take not noisy data
        real_distribution = get_quadratic_data_sample(batch_size, add_noise=False)

        # Set Tensorboard Directory to track training
        time = strftime("%d-%b-%H%M", localtime())
        log_dir = path.join('..', 'logs', 'simple_gan', time)

        # Initialize Keras metrics to track training
        generator_train_loss = tf.keras.metrics.Mean('generator_train_loss', dtype=tf.float32)
        discriminator_train_loss = tf.keras.metrics.Mean('discriminator_train_loss', dtype=tf.float32)

        # Create Scope in order to set Tensorboard hyperparameters
        with tf.name_scope("Simple Gan Training") as scope:

                # Start model training tracing (logs)
                tf.summary.trace_on()
                summary_writer = tf.summary.create_file_writer(log_dir)
                # START TRAINING
                for e in range(epochs):
                        # Collect data
                        real_data = get_quadratic_data_sample(batch_size)
                        # Train gan: Perform batch training with the collected data
                        d_loss, g_loss = train_step(real_data, generator, discriminator, gan)
                        # Save generator and discriminator losses
                        generator_train_loss(g_loss)
                        discriminator_train_loss(d_loss)

                        # TRACK TRAINING
                        # Create an image comparing Real Data Distribution and (quadratic distribution)
                        # and generator Distribution (Distribution we want to approximate)
                        # Visual tracking: Every n epochs create a plot comparing real and fake data distribution
                        if e % plot_interval == 0:
                                # Create Matplotlib figure
                                fig = plt.figure()
                                # Points generated by generator with control vectors
                                control_generated_data_points = generator.predict_on_batch(control_z_vectors)
                                # Plot Points generated by generator with control vectors
                                plot_quadratic_data(control_generated_data_points, show=False)
                                # Plot real distribution
                                plot_quadratic_data(real_distribution, show=False)
                                # Save plot image to buffer (no file creation needed)
                                buf = save_plot_to_buffer()
                                # Close plt figure
                                plt.close(fig)
                                # Convert PNG buffer to TensorBoard image
                                image = tf.image.decode_png(buf.getvalue(), channels=4)
                                # Add the batch dimension
                                image = tf.expand_dims(image, 0)
                                # track training through console
                                template = 'Epoch {}, Gen Loss: {}, Dis Loss {}'
                                print(template.format(e + 1,
                                                      generator_train_loss.result(),
                                                      discriminator_train_loss.result()))

                        # Write training into Tensorboard
                        with summary_writer.as_default():
                                # Write losses
                                tf.summary.scalar('Generator Loss',
                                                  generator_train_loss.result(),
                                                  step=e)

                                tf.summary.scalar('Discriminator Loss',
                                                  discriminator_train_loss.result(),
                                                  step=e)

                                # Write image of real and generated data distribution into Tensorboard
                                if e % plot_interval == 0: tf.summary.image('Comparison', image, step=e)

        # Stop training tracing
        tf.summary.trace_off()

        # Save Models
        save_models(discriminator, generator, gan, 'simple_gan')
